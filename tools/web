#!/usr/bin/env python3

import os
import sys

import git


repo_root = None
src_dir = None
PREAMBLE_SEPARATOR = '---\n'
INDEX_FILE = 'index.html'
TOOLS_LAYOUT = 'layout: tool\n'
PREAMBLES = {
        'avalon': {'title': 'Tiny Avalon'},
        'chess': {'title': 'Tiny Chess', 'json': './manifest.json'},
        'cit': {'title': 'The Cartographically Imbricating Transformer'},
        'req': {'title': 'The UBC Prereq Tree'},
        'track': {'title': 'Tiny Tracker'},
}



def get_name(name):
    return os.path.splitext(name)[0]

def strip_repo_root(path):
    return os.path.relpath(path, repo_root)


def print_progress(message, func):
    print(f'{message}...', end='\r', flush=True)
    output = func()
    if type(output) == tuple:
        output = output[0]
    print(f'{message}: {output.strip()}', flush=True)


def archive():

    with os.scandir(src_dir) as it:
        for entry in it:
            if entry.is_dir():
                if os.path.exists(os.path.join(entry.path, 'index.html')):
                    print(get_name(strip_repo_root(entry.path)))


def build():

    with os.scandir(src_dir) as it:
        for entry in it:
            if entry.is_dir():
                content = []

                content.append(PREAMBLE_SEPARATOR)
                content.append(TOOLS_LAYOUT)
                for key, value in PREAMBLES[entry.name].items():
                    content.append(f'{key}: {value}\n')
                content.append(f'css: ./{entry.name}.css\n')
                content.append(PREAMBLE_SEPARATOR)

                file_path = os.path.join(entry.path, INDEX_FILE)
                print('Overwriting tools page...', end='\r', flush=True)

                with open(file_path, 'r') as f:
                    in_body = False
                    for line in f:
                        if line.strip() == '</body>':
                            break
                        if in_body:
                            content.append(line)
                        if line.strip() == '<body>':
                            in_body = True

                with open(file_path, 'w') as f:
                    for line in content:
                        f.write(line.replace('./', '{{ url }}'))
                print('Overwriting tools page: '
                        + os.path.relpath(file_path, repo_root))


def clean():

    os.chdir(repo_root)
    repo = git.Repo(repo_root)
    for submodule in repo.submodules:
        submodule.update(init=True)
        submodule.module().head.reset(index=True, working_tree=True)

    return f'{strip_repo_root(src_dir)}/'



def bad_input():
    print('Usage: ./web [archive|build|clean] [repo_root] [src_dir]')
    exit(1)

if __name__ == '__main__':

    if len(sys.argv) != 4:
        bad_input()

    repo_root = sys.argv[2]
    src_dir = sys.argv[3]
    if sys.argv[1] == 'archive':
        archive()
    elif sys.argv[1] == 'build':
        build()
    elif sys.argv[1] == 'clean':
        print_progress('Resetting submodules', clean)
    else:
        bad_input()
