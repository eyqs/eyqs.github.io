#!/usr/bin/env python3

import os
import sys
import datetime


repo_root = None
src_dir = None
PREAMBLE_SEPARATOR = '---\n'
EXCERPT_SEPARATOR = '<!--more-->\n'
INDEX_FILE = 'index.html'
IGNORED_NAMES = ['web']
MARKDOWN_EXTENSION = '.md'



def get_name(name):
    return os.path.splitext(name)[0]

def get_extension(name):
    return os.path.splitext(name)[1]

def strip_repo_root(path):
    return os.path.relpath(path, repo_root)

def is_post(name):
    return get_extension(name) == MARKDOWN_EXTENSION

def is_ignored(name):
    return name in IGNORED_NAMES or name.startswith('.')


def print_progress(message, func):
    print(f'{message}...', end='\r', flush=True)
    output = func()
    if type(output) == tuple:
        output = output[0]
    print(f'{message}: {output.strip()}', flush=True)


def process_preamble(src_path):

    content = []
    preamble = None
    parameters = {}

    with open(src_path, 'r') as f:
        for line in f:
            if line == PREAMBLE_SEPARATOR:
                if preamble is None:
                    preamble = True
                else:
                    preamble = False
            elif preamble:
                key, value = line.split(':', 1)
                parameters[key] = value.strip()
            elif line == EXCERPT_SEPARATOR:
                break
            else:
                content.append(line)

    return content, parameters


def extract_excerpts():

    result = {}

    with os.scandir(src_dir) as it:
        for entry in it:
            if is_ignored(entry.name):
                continue

            if is_post(entry):
                content, parameters = process_preamble(entry.path)
            elif entry.is_dir():
                content, parameters = process_preamble(
                        os.path.join(entry.path, INDEX_FILE))
            else:
                raise RuntimeError(f'Cannot have file "{entry.path}" in blog')

            rel_path = os.path.relpath(entry.path, src_dir)
            rel_url = get_name(strip_repo_root(entry.path))
            post_date = datetime.datetime.strptime(rel_path[:4], '%y%m')

            result[post_date] = [
                    f'## {parameters["title"]}\n\n',
                    f'#### {post_date.strftime("%Y %B")}\n\n',
                    *content,
                    f'<p><a href="%/{rel_url}/">Continue reading Â»</a></p>\n',
            ]

    return result


def write_excerpts(blog_excerpts):

    post_order = list(reversed(sorted(blog_excerpts.keys())))
    blog_path = os.path.join(src_dir, INDEX_FILE)

    with open(blog_path, 'w') as f:
        f.write(PREAMBLE_SEPARATOR)
        f.write('layout: page\n')
        f.write('title: Blog\n')
        f.write(PREAMBLE_SEPARATOR)
        for post_date in post_order:
            for line in blog_excerpts[post_date]:
                f.write(line)
            if post_date != post_order[-1]:
                f.write('\n\n')

    return strip_repo_root(blog_path)


def build():

    blog_excerpts = extract_excerpts()
    return write_excerpts(blog_excerpts)


def clean():

    blog_path = os.path.join(src_dir, INDEX_FILE)
    try:
        os.remove(blog_path)
    except FileNotFoundError:
        pass
    return strip_repo_root(blog_path)



def bad_input():
    print('Usage: ./web [build|clean] [repo_root] [src_dir]')
    exit(1)

if __name__ == '__main__':

    if len(sys.argv) != 4:
        bad_input()

    repo_root = sys.argv[2]
    src_dir = sys.argv[3]
    if sys.argv[1] == 'build':
        print_progress('Collating blog excerpts', build)
    elif sys.argv[1] == 'clean':
        print_progress('Deleting blog excerpts', clean)
    else:
        bad_input()
